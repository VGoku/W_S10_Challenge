// // import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// // import { pizzaApi } from './pizzaApi';

// // const initialState = {
// //   orders: [],
// //   loading: false,
// //   error: null,
// // };

// // export const fetchOrders = createAsyncThunk(
// //   'pizza/fetchOrders',
// //   async (_, { rejectWithValue }) => {
// //     try {
// //       const response = await pizzaApi.get('/history');
// //       return response.data;
// //     } catch (err) {
// //       return rejectWithValue(err.response.data);
// //     }
// //   }
// // );

// // const pizzaSlice = createSlice({
// //   name: 'pizza',
// //   initialState,
// //   reducers: {},
// //   extraReducers: (builder) => {
// //     builder
// //       .addCase(fetchOrders.pending, (state) => {
// //         state.loading = true;
// //       })
// //       .addCase(fetchOrders.fulfilled, (state, action) => {
// //         state.orders = action.payload;
// //         state.loading = false;
// //       })
// //       .addCase(fetchOrders.rejected, (state, action) => {
// //         state.error = action.payload;
// //         state.loading = false;
// //       });
// //   }
// // });

// // export default pizzaSlice.reducer;


// import { createSlice } from '@reduxjs/toolkit';

// // Define the initial state for the pizza slice
// const initialState = {
//   filter: 'All', // The initial filter state for the order list
//   // Add any other state properties you need for your application
// };

// // Create the pizza slice with the initial state and reducers
// export const pizzaSlice = createSlice({
//   name: 'pizza', // The name of the slice
//   initialState, // The initial state object
//   reducers: {
//     // The `setFilter` reducer action to update the filter state
//     setFilter: (state, action) => {
//       state.filter = action.payload;
//     },
//     // Add other reducer actions if needed
//   },
//   // If you have extra reducers for async actions, you can add them here
//   extraReducers: (builder) => {
//     // builder.addCase(yourAsyncAction.fulfilled, (state, action) => {
//     //   // Handle the fulfilled case of your async action
//     // });
//   },
// });

// // Export the action creators generated by the slice
// export const { setFilter } = pizzaSlice.actions;

// // Export the reducer to be used in the store
// export default pizzaSlice.reducer;

import { createSlice } from '@reduxjs/toolkit';
import { pizzaApi } from './pizzaApi';

const initialState = {
  filter: 'All',
};

const pizzaSlice = createSlice({
  name: 'pizza',
  initialState,
  reducers: {
    setFilter: (state, action) => {
      state.filter = action.payload;
    },
  },
});

export const { setFilter } = pizzaSlice.actions;

export default pizzaSlice.reducer;
